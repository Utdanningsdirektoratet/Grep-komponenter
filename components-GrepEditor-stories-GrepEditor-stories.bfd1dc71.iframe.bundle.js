"use strict";(self.webpackChunkgrep_components=self.webpackChunkgrep_components||[]).push([[3435],{"./src/components/GrepEditor/stories/GrepEditor.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomButtons:()=>CustomButtons,CustomStyles:()=>CustomStyles,CustomToolbar:()=>CustomToolbar,DisableAndStripNewlines:()=>DisableAndStripNewlines,DisablePasting:()=>DisablePasting,OnlyHeading:()=>OnlyHeading,PasteStrippingAndBlockedInlineStyles:()=>PasteStrippingAndBlockedInlineStyles,ReadOnly:()=>ReadOnly,Standard:()=>Standard,WithCharacterCount:()=>WithCharacterCount,WithLabel:()=>WithLabel,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var _mui_material__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@mui/material/esm/Container/Container.js"),___WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/GrepEditor/index.tsx"),_styling__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/styling/index.ts"),lexical__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/lexical/Lexical.prod.mjs"),_lexical_html__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@lexical/html/LexicalHtml.prod.mjs"),_components_buttons_InlineButton__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/GrepEditor/components/buttons/InlineButton.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react/jsx-runtime.js"),useStyles=(0,_styling__WEBPACK_IMPORTED_MODULE_2__.n9)()({root:{background:"red"}}),myToolbar=function myToolbar(_ref){var buttons=_ref.buttons,editor=_ref.editor,isSelected=_ref.isSelected;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("div",{children:buttons.map((function(_ref2,key){var type=_ref2.type,children=_ref2.children;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_components_buttons_InlineButton__WEBPACK_IMPORTED_MODULE_3__.A,{type,editor,selected:isSelected[key],children},key)}))})};const __WEBPACK_DEFAULT_EXPORT__={title:"GrepEditor",decorators:[function(storyFn){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_mui_material__WEBPACK_IMPORTED_MODULE_5__.A,{style:{marginTop:40,display:"flex",flexDirection:"column",justifyContent:"space-between"},children:storyFn()})}]};var Standard=function Standard(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.A,{})},CustomStyles={render:function render(){var classes=useStyles().classes;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.A,{classes})},name:"Custom styles"},CustomToolbar={render:function render(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.A,{Toolbar:myToolbar})},name:"Custom toolbar"},CustomButtons={render:function render(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.A,{allowedStyles:["bold"],helperText:"Some help text",onContentChange:function onContentChange(editorState,editor){editorState.read((function(){console.log("Lexical-text",(0,lexical__WEBPACK_IMPORTED_MODULE_6__.NvY)()),console.log("Lexical-html",(0,_lexical_html__WEBPACK_IMPORTED_MODULE_7__.g)(editor))}))}})},name:"Custom buttons"},PasteStrippingAndBlockedInlineStyles={render:function render(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.A,{stripPastedStyles:!0,allowedStyles:[]})},name:"Paste stripping and blocked inline styles"},WithCharacterCount={render:function render(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.A,{showCharCount:!0,helperText:"Marker tekst for formatering",onContentChange:function onContentChange(editorState,editor){editorState.read((function(){console.log("Lexical-text",(0,lexical__WEBPACK_IMPORTED_MODULE_6__.NvY)()),console.log("Lexical-html",(0,_lexical_html__WEBPACK_IMPORTED_MODULE_7__.g)(editor))}))}})},name:"With character count"},DisableAndStripNewlines={render:function render(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.A,{disableNewlines:!0,onContentChange:function onContentChange(editorState,editor){editorState.read((function(){console.log("Lexical-text",(0,lexical__WEBPACK_IMPORTED_MODULE_6__.NvY)()),console.log("Lexical-html",(0,_lexical_html__WEBPACK_IMPORTED_MODULE_7__.g)(editor))}))}})},name:"Disable and strip newlines"},DisablePasting={render:function render(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.A,{blockPasting:!0,onContentChange:function onContentChange(editorState,editor){editorState.read((function(){console.log("Lexical-text",(0,lexical__WEBPACK_IMPORTED_MODULE_6__.NvY)()),console.log("Lexical-html",(0,_lexical_html__WEBPACK_IMPORTED_MODULE_7__.g)(editor))}))}})},name:"Disable pasting"},WithLabel={render:function render(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.A,{label:"This is a label"})},name:"With label"},OnlyHeading={render:function render(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.A,{html:"<h3>This is an h3 tag, but it could be any heading tag between h1 and h6 based on html input.</h3>"})},name:"OnlyHeading"},ReadOnly={render:function render(){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(___WEBPACK_IMPORTED_MODULE_1__.A,{readOnly:!0,html:"This is some text you cannot edit"})},name:"ReadOnly"};const __namedExportsOrder=["Standard","CustomStyles","CustomToolbar","CustomButtons","PasteStrippingAndBlockedInlineStyles","WithCharacterCount","DisableAndStripNewlines","DisablePasting","WithLabel","OnlyHeading","ReadOnly"];Standard.parameters={...Standard.parameters,docs:{...Standard.parameters?.docs,source:{originalSource:"() => <GrepEditor />",...Standard.parameters?.docs?.source}}},CustomStyles.parameters={...CustomStyles.parameters,docs:{...CustomStyles.parameters?.docs,source:{originalSource:"{\n  render: () => {\n    const {\n      classes\n    } = useStyles();\n    return <GrepEditor classes={classes} />;\n  },\n  name: 'Custom styles'\n}",...CustomStyles.parameters?.docs?.source}}},CustomToolbar.parameters={...CustomToolbar.parameters,docs:{...CustomToolbar.parameters?.docs,source:{originalSource:"{\n  render: () => <GrepEditor Toolbar={myToolbar} />,\n  name: 'Custom toolbar'\n}",...CustomToolbar.parameters?.docs?.source}}},CustomButtons.parameters={...CustomButtons.parameters,docs:{...CustomButtons.parameters?.docs,source:{originalSource:"{\n  render: () => <GrepEditor allowedStyles={['bold']} helperText=\"Some help text\" onContentChange={(editorState, editor) => {\n    editorState.read(() => {\n      console.log('Lexical-text', $getTextContent());\n      console.log('Lexical-html', $generateHtmlFromNodes(editor));\n    });\n  }} />,\n  name: 'Custom buttons'\n}",...CustomButtons.parameters?.docs?.source}}},PasteStrippingAndBlockedInlineStyles.parameters={...PasteStrippingAndBlockedInlineStyles.parameters,docs:{...PasteStrippingAndBlockedInlineStyles.parameters?.docs,source:{originalSource:"{\n  render: () => <GrepEditor stripPastedStyles allowedStyles={[]} />,\n  name: 'Paste stripping and blocked inline styles'\n}",...PasteStrippingAndBlockedInlineStyles.parameters?.docs?.source}}},WithCharacterCount.parameters={...WithCharacterCount.parameters,docs:{...WithCharacterCount.parameters?.docs,source:{originalSource:"{\n  render: () => <GrepEditor showCharCount helperText=\"Marker tekst for formatering\" onContentChange={(editorState, editor) => {\n    editorState.read(() => {\n      console.log('Lexical-text', $getTextContent());\n      console.log('Lexical-html', $generateHtmlFromNodes(editor));\n    });\n  }} />,\n  name: 'With character count'\n}",...WithCharacterCount.parameters?.docs?.source}}},DisableAndStripNewlines.parameters={...DisableAndStripNewlines.parameters,docs:{...DisableAndStripNewlines.parameters?.docs,source:{originalSource:"{\n  render: () => <GrepEditor disableNewlines onContentChange={(editorState, editor) => {\n    editorState.read(() => {\n      console.log('Lexical-text', $getTextContent());\n      console.log('Lexical-html', $generateHtmlFromNodes(editor));\n    });\n  }} />,\n  name: 'Disable and strip newlines'\n}",...DisableAndStripNewlines.parameters?.docs?.source}}},DisablePasting.parameters={...DisablePasting.parameters,docs:{...DisablePasting.parameters?.docs,source:{originalSource:"{\n  render: () => <GrepEditor blockPasting onContentChange={(editorState, editor) => {\n    editorState.read(() => {\n      console.log('Lexical-text', $getTextContent());\n      console.log('Lexical-html', $generateHtmlFromNodes(editor));\n    });\n  }} />,\n  name: 'Disable pasting'\n}",...DisablePasting.parameters?.docs?.source}}},WithLabel.parameters={...WithLabel.parameters,docs:{...WithLabel.parameters?.docs,source:{originalSource:"{\n  render: () => <GrepEditor label=\"This is a label\" />,\n  name: 'With label'\n}",...WithLabel.parameters?.docs?.source}}},OnlyHeading.parameters={...OnlyHeading.parameters,docs:{...OnlyHeading.parameters?.docs,source:{originalSource:"{\n  render: () => <GrepEditor html=\"<h3>This is an h3 tag, but it could be any heading tag between h1 and h6 based on html input.</h3>\" />,\n  name: 'OnlyHeading'\n}",...OnlyHeading.parameters?.docs?.source}}},ReadOnly.parameters={...ReadOnly.parameters,docs:{...ReadOnly.parameters?.docs,source:{originalSource:"{\n  render: () => <GrepEditor readOnly html=\"This is some text you cannot edit\" />,\n  name: 'ReadOnly'\n}",...ReadOnly.parameters?.docs?.source}}}},"./src/styling/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Jy:()=>Colors.A,dT:()=>convertToRgba,qh:()=>hex2rgba,n9:()=>makeStyles});var Colors=__webpack_require__("./src/styling/Colors/index.ts"),slicedToArray=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/slicedToArray.js"),hexPattern=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,hexPatternShorthand=/^#?([a-f\d])([a-f\d])([a-f\d])$/i,convertHex2rgb=function convertHex2rgb(hex){var match=hex.replace(hexPatternShorthand,(function(_m,r,g,b){return r+r+g+g+b+b})).match(hexPattern);return match&&match.shift(),match?match.map((function(i){return parseInt(i,16)})):[]},hex2rgba=function hex2rgba(hex,alpha){var rgb=convertHex2rgb(hex);return rgb&&rgb.push(alpha),rgb&&"rgba(".concat(rgb.join(","),")")},convertToRgba=function convertToRgba(color,alpha){if(color.match(/^#/))return hex2rgba(color,alpha);var _ref=color.match(/[(](.*)[)]/)||[],value=(0,slicedToArray.A)(_ref,2)[1];return value?"rgba(".concat(value,", ").concat(alpha,")"):color},useTheme=__webpack_require__("./node_modules/@mui/material/esm/styles/useTheme.js"),_createMakeAndWithSty=(0,__webpack_require__("./node_modules/tss-react/esm/index.js").Q2)({useTheme:useTheme.A}),makeStyles=_createMakeAndWithSty.makeStyles;_createMakeAndWithSty.withStyles}}]);